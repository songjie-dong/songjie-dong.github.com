---
layout: post
title: "android菜鸟的吐槽1"
date: 2012-09-09 22:33
comments: true
categories: [android, performance, jit] 
---

近期一直忙于写android应用的代码,其实我没有看完过任何一本android的著作,虽然说书籍收集了也
不少了,但很少完整的去看,有时候发现最靠谱的还是官方文档和一些实践性的书籍或者blog,通常工作
中是遇到问题,查资料,然后解决问题,在这个过程中慢慢发现其实写android的代码很有挑战性,要关注
的东西很多,比如:

1. 程序本身的高效,高效意味着更短的延迟,用户更好的体验.

2. 网络的开销,比如官方[这篇](http://developer.android.com/training/efficient-downloads/efficient-network-access.html#RadioStateMachine)关于网络对于电量的影响

3. 异步处理,费时操作都得异步,否则UI就block了,再过几秒系统就提示无反应了,最坏的结果就是被直接拖到垃圾桶.

在这里我就不说后两点的,主讲第一点,也就是程序效率的本身,高效和OO之间似乎有些矛盾,当然这种问题
在java领域已经越来越不明显,因为java server级的JIT(Just In Time Compiler)已经为我们做了
足够多的工作,而我们都是坐享其成,如果没有inline优化,你们敢想一个方法不超过5行吗?for循环我们
很少去手动提取不变量了,因为JIT总是能帮我们找到hot的loop并优化掉,而一些非热点且低效代码,则被
超强的机器性能所掩盖.而对于dalvik,情况发生了变化,一切似乎回到那个资源无比紧缺的时代,系统的设
计需要考虑移动设备的特点和dalvik本身.

在这个**时代**写代码除了算法加数据结构,我们还有很多问题要关注,因为这个时代的主流不再是孤胆英雄式的
程序员,更多的需要依赖团队开发,对于公司来说,代码的可维护性并不比高效的分量轻多少,而在android上
很多优化都是具有版本和硬件的亲和性,不同的版本,不同的硬件也许有完全不一样的结果,所以一个优化值不
值得做是个需要好好思考的问题,而我个人对于这个问题的建议是:

1. 优化方案本身的生命力
   比如getter,setter的性能问题,早期dalvik的getter,setter确实比直接读写成员性能要差很多
   但这个优化有些逆天了,而且长远来看这种问题被内置优化的可能性较大,故在可忍受的范围内可以优化
   但不能作为普遍使用的技巧,否则就颠覆了OO的封装,随意修改私有对象状态倒是无所谓,如果是共享的
   那就....
   
2. 优化是否有必要
   很多时候我们未必需要按官方的建议优化,比如绝大多数的app都不会占据太多的CPU,当然如果是一些
   游戏的话...所以我们大可不必过于的关心一些优化代码的技巧,let it go~,写出你认为更美观的代
   码才是绝大多数情况下我们要考虑的问题.
   
3. 如果必须要优化,泡好一杯茶,打起精神,尽量将优化对于系统整体的影响降到最低程度.




