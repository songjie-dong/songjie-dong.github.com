---
layout: post
title: "'计算密集型操作优化探究'"
date: 2013-04-17 23:32
comments: true
categories: [计算,公共子表达式,编译优化]
---


半年前开始有个蠢想法,对java里面的代数表达式计算的可优化做研究,看看能否有一些成果可以提炼出来,现在看来这个想法有点难度太大....大到几乎没有价值,所以要投身开源还是从研究开源开始,表异想天开造轮子了.


且不提为什么有这种想法吧,起初我想研究一些在代码实现过程中能优化的程度,但看过龙书,特别是鲸书后,基本没了想法.首先列一些我想得到的优化可能:
- 公共子表达式消除
- 乘与加转换
- 由于我们coding需要考虑可读性,但对于复杂公式,我们不会考虑自己来消除,否则会带来可读性问题
- 重复计算时,部分变量的全局缓存

没想法的原因如下:
java 本身支持对公共子表达式的消除,经过测试发现,编译时会做非常简单而且显而易见的消除优化,jit则会根据平台特性来做针对性优化,而且只有jit能做针对性的优化.以上的优化可能我们逐一分析,公共子表达式消除的问题,如果你将一些子表达式提取成变量,可能需要考虑寄存器分配(Register allocation)问题,变量增加可能会导致溢出(spilling),于是变量需要在RAM来分配和访问.考虑到计算成本远远小于RAM访问成本,所以子表达式消除与cpu实现相关,有些情况可能会做向前替换,消除变量,避免不必要的溢出(spilling).通常建议在LIR做子表达式消除,就是因为子表达式消除并不总是对的.

乘法的性能如果已经足够好了,还要优化成加法吗?
  
变量分配到register,于是对于java GC本身压力不大,全局变量缓存甚至是反作用.

低级别优化,特殊架构下的特殊指令优化.


java code 怎么做都可能是错的...所以还是洗洗睡吧.

openjdk7,我没找到明确的code....但发现hsdis已经集成到7里面了,反汇编应该可以用来分析JVM内部对于表达式消除的优化处理,这块除了特别关注计算性能和开销才会考虑研究jit优化的结果是否符合要求,但通常也不会过于关注表达式消除,反而是用了表达式消除带来的溢出才可能是个问题.




