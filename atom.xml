<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[All Things Coding]]></title>
  <link href="http://songjie-dong.github.com/atom.xml" rel="self"/>
  <link href="http://songjie-dong.github.com/"/>
  <updated>2012-11-07T14:34:19+08:00</updated>
  <id>http://songjie-dong.github.com/</id>
  <author>
    <name><![CDATA[Songjie Dong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[字节序与java]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/11/07/zi-jie-xu-yu-java/"/>
    <updated>2012-11-07T01:13:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/11/07/zi-jie-xu-yu-java</id>
    <content type="html"><![CDATA[<p>所谓字节序也就是字节在内存中存放的顺序,分为大端(big endian,低位存放高字节)和小端(little endian,低位存放低字节),再来又有主机序和网络序之说,主机序就是当前主机的字节序,说白点就是CPU的字节序,而CPU的字节序由于历史原因,分为不同的阵营,intel是小端,摩托,IBM,SUN则是大端,至于java,不用说,肯定得站对队伍了.使用c语言可以很快速的判断当前机器的endian,int i = 1 变量强转char*,这样可以取到低位值判断是否任然等于1即可.网络序就是在网络传输过程中的顺序,基于未知原因(有人说是抛硬币决定),网络序固定为big endian,不管怎样,固定更加有利于我们程序的健壮性,因为我们只需要处理一种情况,同时也可以节约码农的时间,避免诡异的错误.</p>

<p>废话完毕,说说java中的字节序,网上传言java都是big endian,这个观点本身由于说的太绝对是有一些误导性的,特别是对于以上内容了解不细致的时候,其实作为java来说只是在规范中约定了class文件和操作数都是big endian,同时也有人补充说明所有的流都是big endian,<a href="http://docs.oracle.com/javase/6/docs/api/java/nio/ByteOrder.html#nativeOrder%28%29">nativeOrder</a>可以读取当前机器的字节序作为参考,只在性能极其敏感的场景在所分配的direct buffer实现与硬件一致的字节序.所以在java中我们定义一个int变量并赋值后,变量本身的字节序任然取决于硬件本身,不要被误导了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[此时此刻]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/11/06/ci-shi-ci-ke/"/>
    <updated>2012-11-06T15:05:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/11/06/ci-shi-ci-ke</id>
    <content type="html"><![CDATA[<p>最近看了钱老说的一句话:一个人,到了20岁还不狂，这个人是没出息的；到了30岁还狂，也是没出息的。</p>

<p>以此句开头颇有意味,20岁的时候我还没狂,只是把无处安放的青春献给了网吧,一晃就29岁啦,赶上了20岁狂的那拨人,但还是隐隐感到有危机.</p>

<p>有时候感觉到到有心无力,特别是每当把问题研究到比较深入领域时,我总是会感觉有某种障碍在阻拦我的前进,于是我在近一两年开始有意识的结构化很多计算机本知识,回归到最原始的途径来学习,如今看来确实小有收获,但知识体系尚未完全建立,很多常识性的知识还有待进一步的积累,但怎奈环境一直不够给力.</p>

<p>如此情况下,我看30岁是不可能狂的,这样也好,应了钱老的后半句句话,否则真没出息怎么办,O(∩_∩)O~,我要从新扬帆起航,虽然知道放弃自己所熟悉的领域,去探索未知的世界,对于这个世俗的世界来说是个极大的风险,但我还是想义无反顾的去尝试让自己有更多的可能性.此时此刻,为了以后的出息而努力吧.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[is parallel programming hard? -1]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/10/26/is-parallel-programming-hard-1/"/>
    <updated>2012-10-26T18:10:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/10/26/is-parallel-programming-hard-1</id>
    <content type="html"><![CDATA[<h2>迷思</h2>

<p>“Is Parallel Programming Hard, And, If So, What Can You Do About It?”,这本书很久就知道,一直没怎么看过,多半对于并行的理解来自于工作中需要对java处理并行的方式有一定的了解,所以看了不少关于JVM内存模型,线程安全控制,doug lea的并发包处理,深入理解计算机等等相关的书籍,文档和blog,但知识体系不够完整,所以这个系列记录一些阅读本书的笔记</p>

<h2>关于CPU</h2>

<p>作者开篇介绍了有些粗心的人对于CPU的理解就像在没有障碍的赛道上跑步,总能保持较快的速度,但事实上除了一些计算密集型的场景以外,绝大多数的程序相比于竞速赛跑来说更像是越野障碍赛,下面我们就一起看看有哪些障碍.</p>

<h3>流水线</h3>

<p>现代CPU引入了流水线机制,将不同指令放到不同的流水线执行,这意味着在微观世界里,指令执行的顺序很可能与我们看到的不一样,但会保证执行结果的一致性,这就是指令的重排序过程,重排序可以更充分的利用cpu的流水线机制更迅速的执行指令.但重排序机制也引入了一个问题:需要预取指令,这对于在运行时的条件分支预测提出了挑战,如果你在一个频繁执行的循环中加入一个if else,而这个if else的分支路线分布随机,则难以预测,进而导致流水线无法充分利用,降低系统整体性能.</p>

<h3>内存读写</h3>

<p>CPU的性能的提升速度明显高于内存的访问性能,这导致了CPU访问内存逐渐成为了瓶颈,于是高速缓存的命中率对于性能来说至关重要,而类似链表这种结构显然就不是缓存友好的结构,数组则更加适合(空间局部性).对于单核来说高速缓存能很好的解决内存访问的性能瓶颈,对于多核来说则引入了而外的问题.</p>

<h3>atomic&amp;memory barrier</h3>

<p>现代CPU都提供了原子操作的指令,该指令保证了对单个数据操作的原子性和可见性,memory barrier就是用来保证指令的顺序不会由于重排序破坏了原子性.但barrier机制降低了流水线的使用效率,另外atomic操作结束会将数据直接写内存,保证可见性.</p>

<h3>cache misses</h3>

<p>多核的cache各自独立,进而导致了我们需要避免缓存数据在多个核存在的情况,这会导致cpu之间相互传递数据,引入而外的开销(false sharing),作者在后续文章中提到关于数组实现的并发的计数器设计中需要考虑在数组中增加填充物来避免false sharing问题.</p>

<h2>编程</h2>

<p>以单核平均执行指令数来衡量并行的性能,以上述机制来分析,需要关注的点:</p>

<h3>cache misses</h3>

<p>高速缓存的命中率问题,我们要关注context switch的次数,这就需要间接的关注程序中可能的block因素,IO,锁等等都可能block线程导致context switch.
而context switch后高速缓存需要重新warm-up</p>

<p>过多的线程迁移也会导致类似的问题.</p>

<p>空间局部性,多用数组这种结构,但要注意多核的false sharing问题.</p>

<p>时间局部性</p>

<p>避免不必要的同步和原子操作,有时它们会强制访问内存数据.</p>

<h3>分支预测</h3>

<p>写出分支预测友好的代码,必要情况下可以hard coding或者用mapping来消除if else</p>

<h3>共享</h3>

<p>共享数据总是万恶之源.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再看面向对象]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/10/16/zai-kan-mian-xiang-dui-xiang/"/>
    <updated>2012-10-16T15:52:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/10/16/zai-kan-mian-xiang-dui-xiang</id>
    <content type="html"><![CDATA[<h2>初次见面</h2>

<p>初学OO是在学习Java时,当时感觉OO像是巴别塔,迷恋的人觉得无比的向往,于是猛啃侯捷版的Thinking in java中那几章继承多态啥的,不知道看过多少遍,而后看设计模式(不夸张,期间还有coding例子加冥想体会),当时自我感觉略懂,能用,但写起代码还是有些手足无措.后续又有了很多这方面的书籍,例如:重构-改善既有代码的设计,类似这样的书翻了不少,感觉找到了救世主,最后发现自己严重的教条化,xx代码太长不爽,if太多不爽,没用到模式也不爽,甚至听到每个方法不超过5行这种YY都心潮澎湃.</p>

<h2>我的问题</h2>

<p>OO作为一个时代发展的产物本身没有问题,60年代就出现了OO的概念,后续也出现了一些语言支持,90年代相关理论基本已经完善,等到我学的时候,接触到的都是一些最直接的概念以及大牛们迷恋式的布道,当时的学习方式就是记住相关概念,拜读大牛书籍,然后按模式coding.这样的学习过程带来了极大的问题,因为我把OO看的太形而上,把OO当救世主,认为OO能作为一个可理解性极好的模型来描述世界,殊不知OO并非完美.</p>

<h2>回顾历史</h2>

<p>人们发现当软硬件日益复杂化,代码的维护成本越来越高,需要有一种更加有效和直观的方式来组织不同的代码单元,降低耦合,提高可维护性.60年代OO概念开始出现,后续出现多种支持OOP的语言,相关的概念也逐步形成:动态分派,封装,继承,多态,开放递归等等.对比类似c的以function来组织代码单元的方式,OO则以object作为一等公民,每个object都具备了接收消息,处理数据,发送消息的能力,对象与对象之间通过消息通讯,对象作为系统内部一个独立的&#8221;机器&#8221;,具备独立的状态和能力,用这样的方式,OO同样提供了有效组织代码单元,代码重用,模块化协作的能力.</p>

<h2>问题</h2>

<p>在把OO作为巴别塔的人群中,人们很自然的传播着对于OO的迷恋,但OO并非完美的理论, Bertrand Meyer argues in Object-Oriented Software Construction[21] that a program is not a model of the world but a model of some part of the world,后续也出现了经典的问题,如圆和椭圆的问题.</p>

<p>object作为一等公民,对象成为代码组织方式的核心,进而引入了潜在的易变性问题,而后有人总结并提出面向接口编程,为什么,因为接口才是契约,它无状态,任何的实现必须符合接口提供的规范,同样的输入得到同样的输出,simple and easy,有了这个契约我们才真正的无需关心细节!但我们不能什么都基于接口来编程,我们需要把握某种度,而这种度似乎无法完全掌握,需要case by case.美好的OO编程,其实不像很多迷恋者想的,能够自然且方便的编程,如果没有一些深入的学习,例如了解OO相关的发展过程,概念,优势和劣势等等.我想,用OO写的程序比procedure-oriented更容易出错,而且更容易在程序日益复杂后变得无法维护,难以解耦,可测试性无法与procedure-oriented相比.这显然是有些违背了OO的初衷,同时我们也发现OO其实不是看上去那么易于上手.</p>

<p>同样的输入得到同样的输出(Design By Contract),当我们的程序能够符合某种契约时,很多问题都变得更加的简单化,例如用FP来编程,function作为一等公民,没有易变性,function是比Object更小的单元,可以玩出很多OO中无法玩出的花样,例如闭包,更容易的代码重用,更强的可测试性.所以有很多大牛们推荐学习FP,不是说我们都直接用FP,而是通过对比能更好的看清OO的问题并在日后的coding中借鉴FP的理念.毕竟OO天生就不完美,它与编程的本质似乎存在阻抗不匹配.</p>

<p>OO对于并发的影响大牛们也提到了,这个点我还没明确,现在能想到的是在多核环境下,需要很小心的处理数据的组织形式和读写(缓存抖动,作色,缓存命中率),而OO则天然的决定了数据的组织形式不能从计算机本质的角度出发,后续再分析吧.</p>

<h2>启示</h2>

<ul>
<li>找个FP语言学学,有很多好处</li>
<li>应付应试教育的那套学习方法总是无法带来对本质的认知,而只有挖掘本质才能顿悟.</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Object-oriented">OO Wikipedia</a></li>
<li><a href="http://en.wikipedia.org/wiki/Object-oriented">Design By Contract</a></li>
<li><a href="http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey">Are We There Yet?</a>
这篇文章偶会再分析分析,作者level太高,演讲信息量极大,还有些不理解,后续再记录心得.</li>
<li><a href="http://en.wikipedia.org/wiki/Object-Oriented_Software_Construction">OO software construction</a>
这本书没有中文版,国内关注的人很少(这个结论来自于<a href="http://book.douban.com/subject/1547078/">豆瓣上的关注度</a>),然而却被广泛的认为是OOP的经典之作,可以作为众多计算机书籍的参考标准,并在1994年获得Jolt大奖,不知道有多少人都在OO的世界里迷茫,看完以上资料或许您就能被救赎.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[weak reference 原理分析]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/10/11/weak-reference-yuan-li-fen-xi/"/>
    <updated>2012-10-11T12:33:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/10/11/weak-reference-yuan-li-fen-xi</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>若干年前看了Java的四种引用类型，只是简单知道了不同类型的作用，但对其实现原理一直未能想明白，本文尝试结合jdk，openjdk6的部分源码分析弱引用实现的原理，供大家参考，部分技术细节没有仔细研究，如有疑问欢迎留言讨论</p>

<h2>实例分析</h2>

<p>我们以WeakHashMap的处理过程为例介绍一个weak reference的生命周期，首先我们调用WeakHashMap的put方法放入对象到Map中，WeakHashMap的Entry继承了WeakReference</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">V</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>   <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是put的部分代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">tab</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>        <span class="n">tab</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;(</span><span class="n">k</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">queue</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(++</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="o">)</span>
</span><span class='line'>            <span class="n">resize</span><span class="o">(</span><span class="n">tab</span><span class="o">.</span><span class="na">length</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意new Entry传递了一个reference queue到构造函数中，此构造函数最终会调用Reference的构造函数</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'><span class="n">Reference</span><span class="o">(</span><span class="n">T</span> <span class="n">referent</span><span class="o">,</span> <span class="n">ReferenceQueue</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">queue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">referent</span> <span class="o">=</span> <span class="n">referent</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">queue</span> <span class="o">=</span> <span class="o">(</span><span class="n">queue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">ReferenceQueue</span><span class="o">.</span><span class="na">NULL</span> <span class="o">:</span> <span class="n">queue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>referent是我们之前传入的hashmap的key对象，queue的作用是用来读取referent被回收的weak reference，生产者是谁后续介绍，此时WeakHashMap中已经存在了一个对象，先将key对象的strong ref制空并尝试触发gc，比如使用System.gc()来显式的触发gc，然后调用WeakHashMap的size方法返回集合的个数，绝大多数情况下会是0，这个过程中发生了什么呢？</p>

<p>第一步，key没有可达的strong ref，仅仅存在一个weak reference的referent变量仍然指向了key，触发GC时，以openjdk6的parNew为例，jvm在young generation gc时会尝试获取Reference对象里的静态全局锁</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* Object used to synchronize with the garbage collector.  The collector </span>
</span><span class='line'><span class="cm">     * must acquire this lock at the beginning of each collection cycle.  It is </span>
</span><span class='line'><span class="cm">     * therefore critical that any code holding this lock complete as quickly </span>
</span><span class='line'><span class="cm">     * as possible, allocate no new objects, and avoid calling user code. </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Lock</span> <span class="o">{</span> <span class="o">};</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Lock</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>在openjdk6里的部分源代码,完整代码请参考instanceRefKlass.cpp文件</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">instanceRefKlass</span><span class="o">::</span><span class="n">acquire_pending_list_lock</span><span class="p">(</span><span class="n">BasicLock</span> <span class="o">*</span><span class="n">pending_list_basic_lock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// we may enter this with pending exception set </span>
</span><span class='line'>  <span class="n">PRESERVE_EXCEPTION_MARK</span><span class="p">;</span>  <span class="c1">// exceptions are never thrown, needed for TRAPS argument </span>
</span><span class='line'>  <span class="n">Handle</span> <span class="n">h_lock</span><span class="p">(</span><span class="n">THREAD</span><span class="p">,</span> <span class="n">java_lang_ref_Reference</span><span class="o">::</span><span class="n">pending_list_lock</span><span class="p">());</span>
</span><span class='line'>  <span class="n">ObjectSynchronizer</span><span class="o">::</span><span class="n">fast_enter</span><span class="p">(</span><span class="n">h_lock</span><span class="p">,</span> <span class="n">pending_list_basic_lock</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="n">THREAD</span><span class="p">);</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">ObjectSynchronizer</span><span class="o">::</span><span class="n">current_thread_holds_lock</span><span class="p">(</span>
</span><span class='line'>           <span class="n">JavaThread</span><span class="o">::</span><span class="n">current</span><span class="p">(),</span> <span class="n">h_lock</span><span class="p">),</span>
</span><span class='line'>         <span class="s">&quot;Locking should have succeeded&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">HAS_PENDING_EXCEPTION</span><span class="p">)</span> <span class="n">CLEAR_PENDING_EXCEPTION</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> 此处代码在parNew gc时执行，目的就是尝试获取全局锁，在gc完成后，jvm会将key被回收的weak reference组成一个queue并赋值到Reference的pending属性然后释放锁，参考方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">instanceRefKlass</span><span class="o">::</span><span class="n">release_and_notify_pending_list_lock</span><span class="p">(</span>
</span><span class='line'>  <span class="n">BasicLock</span> <span class="o">*</span><span class="n">pending_list_basic_lock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// we may enter this with pending exception set </span>
</span><span class='line'>  <span class="n">PRESERVE_EXCEPTION_MARK</span><span class="p">;</span>  <span class="c1">// exceptions are never thrown, needed for TRAPS argument </span>
</span><span class='line'>  <span class="c1">// </span>
</span><span class='line'>  <span class="n">Handle</span> <span class="n">h_lock</span><span class="p">(</span><span class="n">THREAD</span><span class="p">,</span> <span class="n">java_lang_ref_Reference</span><span class="o">::</span><span class="n">pending_list_lock</span><span class="p">());</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">ObjectSynchronizer</span><span class="o">::</span><span class="n">current_thread_holds_lock</span><span class="p">(</span>
</span><span class='line'>           <span class="n">JavaThread</span><span class="o">::</span><span class="n">current</span><span class="p">(),</span> <span class="n">h_lock</span><span class="p">),</span>
</span><span class='line'>         <span class="s">&quot;Lock should be held&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Notify waiters on pending lists lock if there is any reference. </span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">java_lang_ref_Reference</span><span class="o">::</span><span class="n">pending_list</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ObjectSynchronizer</span><span class="o">::</span><span class="n">notifyall</span><span class="p">(</span><span class="n">h_lock</span><span class="p">,</span> <span class="n">THREAD</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ObjectSynchronizer</span><span class="o">::</span><span class="n">fast_exit</span><span class="p">(</span><span class="n">h_lock</span><span class="p">(),</span> <span class="n">pending_list_basic_lock</span><span class="p">,</span> <span class="n">THREAD</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">HAS_PENDING_EXCEPTION</span><span class="p">)</span> <span class="n">CLEAR_PENDING_EXCEPTION</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在一次gc后，Reference对象的pending属性不再为空，让我们看看Reference的部分代码
首先是pending属性的说明：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* List of References waiting to be enqueued.  The collector adds </span>
</span><span class='line'><span class="cm"> * References to this list, while the Reference-handler thread removes </span>
</span><span class='line'><span class="cm"> * them.  This list is protected by the above lock object. </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Reference</span> <span class="n">pending</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来是Reference中的内部类ReferenceHandler，它继承了Thread，看看run方法的代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Reference</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">pending</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">r</span> <span class="o">=</span> <span class="n">pending</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Reference</span> <span class="n">rn</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="n">pending</span> <span class="o">=</span> <span class="o">(</span><span class="n">rn</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">rn</span><span class="o">;</span>
</span><span class='line'>            <span class="n">r</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">lock</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>            <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Fast path for cleaners </span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="k">instanceof</span> <span class="n">Cleaner</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">((</span><span class="n">Cleaner</span><span class="o">)</span><span class="n">r</span><span class="o">).</span><span class="na">clean</span><span class="o">();</span>
</span><span class='line'>            <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ReferenceQueue</span> <span class="n">q</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">queue</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">q</span> <span class="o">!=</span> <span class="n">ReferenceQueue</span><span class="o">.</span><span class="na">NULL</span><span class="o">)</span> <span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦jvm notify了前面提到的锁，这个线程就被激活并开始执行，作用是将之前jvm赋值过来的pending对象中的WeakReference对象enqueue到指定的队列中，比如WeakHashMap内部定义的ReferenceQueue属性
此时map的queue中保存了referent已经被回收的WeakReference队列，也就是map的Entry对象，当调用size方法时，内部首先调用expungStaleEntries方法清除被回收掉的Entry，代码如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">expungeStaleEntries</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span> <span class="o">(</span><span class="n">e</span> <span class="o">=</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;)</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">hash</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">h</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>            <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">p</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">prev</span> <span class="o">==</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>                        <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">else</span>
</span><span class='line'>                        <span class="n">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>  <span class="c1">// Help GC </span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">//  &quot;   &quot; </span>
</span><span class='line'>                    <span class="n">size</span><span class="o">--;</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">prev</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>                <span class="n">p</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ok，就这样map的废弃Entry被clear，size返回为0</p>

<h2>参考</h2>

<ul>
<li><a href="http://weblogs.java.net/blog/2006/05/04/understanding-weak-references">understanding-weak-references</a></li>
<li><a href="http://stackoverflow.com/questions/154724/when-would-you-use-a-weakhashmap-or-a-weakreference">when-would-you-use-a-weakhashmap-or-a-weakreference</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDB学习笔记]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/10/11/bdbxue-xi-bi-ji/"/>
    <updated>2012-10-11T11:37:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/10/11/bdbxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>Berkeley DB (DB)是一个高性能的，嵌入数据库，和C语言，C++，Java，Perl，Python，PHP，Tcl以及其他很多语言都有绑定。Berkeley DB可以保存任意类型的键/值对，而且可以为一个键保存多个数据。Berkeley DB可以支持数千的并发线程同时操作数据库，支持最大256TB的数据，广泛用于各种操作系统包括大多数Unix类操作系统和Windows操作系统以及实时操作系统。</p>

<p>在工作中使用的是java版本的bdb( Berkeley DB 以下简称为bdb)，主要用来存储计算结果提供给业务系统访问，比如数据挖掘的结果，这类数据定期会刷新，访问形式单一，存在数据库有点大材小用，另外就是存储大量的计算中间结果。总体来说bdb的性能非常不错，但在使用时还是遇到了一些问题，总结一些经验教训</p>

<h3>问题1：定期build大量计算结果</h3>

<p>实际使用时，写入千万数据后，写入性能急剧下降，但硬盘还在飞转，调节了很多的系统参数，关闭了事务，调大了btree索引缓存(根据bdb内部的DbCacheSize工具调节)，jvm启动参数等等(怀疑是fgc的问题)，都没有解决问题，最后调节了写入数据的顺序才解决了问题，一开始我们没有对写入数据的key排序，而随机写入大量数据导致了btree索引性能的下降，改为顺序写入后，问题解决。那如何解释硬盘飞转呢，其实是由于写操作频繁触发btree结构调整导致。</p>

<h3>问题2：性能测试出现少量lock timeout，软硬件环境不同出现的次数也不同</h3>

<p>默认的locktimeout是500ms，而我们在并发读写的性能测试时出现了少量的timeout情况，32位环境（jdk1.5）下较少，64位环境(jdk1.6)下较多，500ms的timeout，在非高性能要求的环境下，貌似还是短了点。问题是为什么对于不同的环境，出现timeout的次数差距较明显，多次测试发现32位环境出现的较少，64位环境出现的较多，com.sleepycat.je.util.DbCacheSize这个工具让我发现了一些线索，原来我一直以为这个工具就是粗略根据分支节点大概的大小，总数据量，key大小就可以帮助我们计算出大致的索引cache size，比如1000万数据，key长20byte的cache size：</p>

<pre><code>Inputs: records=10000000 keySize=20 dataSize=8092 nodeMax=128 density=80% overhead=10%
Cache Size      Btree Size  Description
871,284,622     784,156,160  Minimum, internal nodes only  
1,180,450,133   1,062,405,120  Maximum, internal nodes only  
91,537,951,288  82,384,156,160  Minimum, internal nodes and leaf nodes  
91,847,116,800  82,662,405,120  Maximum, internal nodes and leaf nodes  
Btree levels: 4 
</code></pre>

<p>这个是在mac下的测试结果，而在32位的ubuntu下测试minimum internal nodes需要501M，主要的原因是由于在不同的环境对应的java对象占用内存大小不一致，而java本身没有提供动态检测对象占用内存大小的方法，在bdb中MemoryBudget类里面定义了不同环境下对应的常用对象的大小，所以，如果用同样的cachesize配置，在不同的环境下会表现出不同的性能，因为如果设置小了会导致部分索引的操作无法命中缓存，性能会有所下降，所以我推测timeout的频率不同的原因是由于固定的cachesize在不同的环境性能也会不同而导致。</p>

<h3>问题3：数据build需要注意的</h3>

<p>对于大数据量写入bdb，同时需要把数据文件跨地区传输时，有一个小的tips，就是在你build完数据以后，close environment后，重新开启一个只读的environment，设置启动参数：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'><span class="n">je</span><span class="o">.</span><span class="na">env</span><span class="o">.</span><span class="na">runCleaner</span> <span class="err">＝</span> <span class="kc">false</span>
</span><span class='line'><span class="n">je</span><span class="o">.</span><span class="na">cleaner</span><span class="o">.</span><span class="na">minUtilization</span> <span class="err">＝</span> <span class="mi">90</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">environment</span><span class="o">.</span><span class="na">cleanLog</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;clean log &quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">CheckpointConfig</span> <span class="n">cleanCheckpointConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CheckpointConfig</span><span class="o">()</span>
</span><span class='line'><span class="n">cleanCheckpointConfig</span><span class="o">.</span><span class="na">setForce</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="n">environment</span><span class="o">.</span><span class="na">checkpoint</span><span class="o">(</span><span class="n">cleanCheckpointConfig</span><span class="o">);</span>
</span><span class='line'><span class="n">environment</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>加上如上代码，这样就可以清除掉大部分废弃的log信息，把文件缩小，这样传输时间会省不少，特别在带宽受限的情况下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿里入职培训的感受]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/10/11/a-li-ru-zhi-pei-xun-de-gan-shou/"/>
    <updated>2012-10-11T11:30:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/10/11/a-li-ru-zhi-pei-xun-de-gan-shou</id>
    <content type="html"><![CDATA[<p>短暂的百年阿里之旅，仿佛让我又回到了大学时代，大家一起做游戏，一起感悟人生，一起体会阿里的价值观，也留下了很多难忘的回忆。</p>

<p>在这里我结识了一帮朋友，大家一起在游戏中，在讲师的各种故事中慢慢的体会到什么是客户第一，团队合作，拥抱变化，激情，敬业，诚信。为了小组最后的价值观表演我们连续两天排练到很晚，回家睡觉时都两点了，最后我还献出了人生中第一次的反串（感觉阿里人都好这口），难忘拓展时大家挺着烈日完成了一个个的任务，彼此信任，互相鼓励，我所在的团队还拿到了最后的冠军，我也得到了一枚小太阳虽然这枚小太阳我弄丢了，但是团队中每一个成员都没有因此责怪我。另外对于团队这两个字的我现在有了更深刻的认识，那就是行动前需要周密的计划与决策，一旦决定，团队必须坚决的执行，除非决策者提出新的方案，只有这样才能保证在高标准，高压力的工作中不断的前进。</p>

<p>对于工作三年的我来说，也经历了很多的事，心中的那个杯子早已不再是空的，我有自己的价值观对于各种事情都有自己很主观的看法，我很明确自己的目标。在培训期间我一直在思考，因为在这里，在阿里有些不一样的东西，有些是我早已忘却的宝贵东西，现在我又重新找到了，很庆幸我能够参加这次培训，它给了我很多，很多。。。</p>

<p>David说了一个字，我印象深刻，那就是德字，在目前的中国，乃至放眼全球，有多少企业能做到这个德字，又有多少企业家在慢慢的丢失掉自己的德。百年阿里，这是个伟大的事业，我也愿意与所有的阿里同仁们一起为这个事业添砖加瓦！从现在开始我任然不是空杯，只是杯子里的水不再浑浊。</p>

<hr />

<p>这篇旧文很可爱&#8230;.希望我能永远保持有这样的心境</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[渐渐离去的战友们]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/10/11/jian-jian-chi-qu-de-zhan-you-men/"/>
    <updated>2012-10-11T11:25:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/10/11/jian-jian-chi-qu-de-zhan-you-men</id>
    <content type="html"><![CDATA[<p>5年前，当我们一群同学踌躇满志杀入IT行业，进入了职场打拼，我们都是怀着自己的梦想，希望通过自己的努力证明自己的能力，5年过去了，剩下了几个，又剩下几个还怀着梦想的人，更多的都是在养老或者混日子或者怨天尤人。</p>

<p>刚开始工作那会，我们经常聚会，吃吃喝喝，工作中的苦恼都消散在我们的酒桌上，某某技术基础较差，我们大家会建议他看什么什么书，或者就一些技术实现给予帮助，某某家庭生活有点问题，我们也会想方设法开导他，总之，虽然大家技术都一般，但是对于程序员这个职业我们还是充满了激情。</p>

<p>5年过去，大部分人都远离的原来的理想，有的人虽然还在从事程序员工作但是已经是行尸走肉，抱着干到30换行业的决心在坚持；有的人干着IT相关基层工作，已经不在coding，生活的依然困惑；有的人因为自身性格和综合能力问题，虽然有一定技术基础，但是无法适应环境，三天打渔，两天晒网，干活也只是为了挣点生活费；有的人自认为已经out了，无法跟随IT业飞速发展，被不断出现的新技术所累，慢慢丧失激情；有些人稍微混的好点，但也仅限于待遇，还是无法逃离所谓“中国程序员只能干到30”的魔咒，甚至自己都这么认为；即使有些混的不错了，但是满身都是职业病，对于IT业早已萌生退意。</p>

<p>5年了，这五年我们的聚会，交流越来越少，似乎每个人都有自己的想法，都过的不如意，大家都变得不愿意沟通，喜欢按自己想的来，伴随着中国经济的飞速发展，房价，物价的大涨，大多数人的如意算盘打错了，因为所谓的混若干年经验带来的不错的待遇如今已经无法满足我们的生活需求，IT高薪梦破灭，我们还需要更多的钱，于是我们在去寻找着更好待遇的时候，我们发现，这几年来大家一直都忽视了程序员混饭吃必须的东西：持续的对于技术的激情。我们失去的是我们的干家本领，于是所有的现象都不难解释了：“IT行业我受够了，干的太累了，别人随便做点生意都比我挣的多”，“搞技术太无聊了，如果在我再选一次，打死我也不选这个职业”，“最近检查出了很多职业病，哎，以后不能太拼命了，混着得了”，“技术还不都是那些东西，学起来也没意思”。</p>

<p>每次与战友们聊天我都能感受到大家不想干下去的想法，但是生活就是这样，5年了，你付出了什么，你就能得到什么，想着混经验待遇自然会涨，想着做几年技术就搞管理，想着怎么挣钱而不是怎么学好技术，诸如此类，很多时候我们都是在做错误的事情，哪怕是我们正确的做好了事情，但是本质上路走错了，我们很难再回头了，很伤感，眼看着大家离自己最初的梦想越来越远，生活原来是这么的残酷。</p>

<p>技术这活还是条很艰难的路，但是就像那首诗说的，既然我们选择了少有人走的路，我们就要走出属于自己的精彩，希望战友们以后的工作顺利，家庭幸福，即使大家都已不在IT圈打拼。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nagle 算法]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/10/10/nagle-suan-fa/"/>
    <updated>2012-10-10T16:55:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/10/10/nagle-suan-fa</id>
    <content type="html"><![CDATA[<p>在各种场合看到涉及网络通讯的代码时,总会到到TCP_NODELAY的设置,也就是绕过nagle算法,虽然了解这个算法的基本原理,但一直没有机会追根述源,看wikipedia上关于nagle算法的介绍,很详细,所以也懒得分析,直接简单翻译并记录一下该算法,以免后续总问自己这算法到底能功能用在哪?</p>

<h2>介绍</h2>

<p>nagle算法以其发明者john nagle命名,该算法通过减少在网络上传输的包来改进网络上传输的效率.</p>

<p>nagle在文档:Congestion Control in IP/TCP Internetworks中描述了所谓的&#8221;small packet problem&#8221;, 即当一个应用重复发送小块数据,通常大小只有1个byte.TCP的包体中有40byte的header(20byte的TCP信息,20byte的ipv4信息),而这会导致41个byte的包只有一个byte的有用信息,这是一个巨大的开销.这种情况常常出现在使用telnet会话时大部分键盘输入会生成一个byte有效数据并被立即传输时,更坏的是在慢速网络环境下,大量这样的包会在同一时间传输,会潜在的导致拥塞崩溃.</p>

<h2>pseudocode</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span> <span class="n">there</span> <span class="n">is</span> <span class="k">new</span> <span class="n">data</span> <span class="n">to</span> <span class="n">send</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">the</span> <span class="n">window</span> <span class="n">size</span> <span class="o">&gt;=</span> <span class="n">MSS</span> <span class="n">and</span> <span class="n">available</span> <span class="n">data</span> <span class="n">is</span> <span class="o">&gt;=</span> <span class="n">MSS</span>
</span><span class='line'>      <span class="n">send</span> <span class="n">complete</span> <span class="n">MSS</span> <span class="n">segment</span> <span class="n">now</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">there</span> <span class="n">is</span> <span class="n">unconfirmed</span> <span class="n">data</span> <span class="n">still</span> <span class="n">in</span> <span class="n">the</span> <span class="n">pipe</span>
</span><span class='line'>        <span class="n">enqueue</span> <span class="n">data</span> <span class="n">in</span> <span class="n">the</span> <span class="n">buffer</span> <span class="n">until</span> <span class="n">an</span> <span class="n">acknowledge</span> <span class="n">is</span> <span class="n">received</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">send</span> <span class="n">data</span> <span class="n">immediately</span>
</span><span class='line'>      <span class="n">end</span> <span class="k">if</span>
</span><span class='line'>    <span class="n">end</span> <span class="k">if</span>
</span><span class='line'>  <span class="n">end</span> <span class="k">if</span>    
</span></code></pre></td></tr></table></div></figure>


<h2>问题</h2>

<p>80年代初,有个组织提交了名为TCP Delayed Acknowledgment的算法,该算法会合并多个ack包以达到提升效率的作用,最大的ack延迟为500ms.当两个算法同时启用时,出现write-write-read的顺序时则由于第二个写可能的延迟导致read时间过长.由于这个原因,TCP实现提供了一些应用接口来关闭nagle算法,通常这个可选项名为TCP_NODELAY.(关于write-write-read带来的问题还有些不是很清晰)</p>

<p>nagle算法适用于任何大小的数据,如果一次写请求需要发送的包跨度为 2n packets,则最后的数据包会被buffer,直到收到前一个包的ack消息,延迟会增加上百ms,而且是由于这个算法导致了额外的开销.如果数据大于一个packet时,requester或responser最好都关闭该算法.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ltrace学习]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/10/10/ltracexue-xi/"/>
    <updated>2012-10-10T16:30:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/10/10/ltracexue-xi</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[protocol buffer 设计分析]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/09/26/protocol-buffer-she-ji-fen-xi/"/>
    <updated>2012-09-26T17:27:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/09/26/protocol-buffer-she-ji-fen-xi</id>
    <content type="html"><![CDATA[<h2>诞生</h2>

<p>传说google在索引系统的充斥着这样的代码</p>

<figure class='code'><figcaption><span>ugly code by google  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">version</span> <span class="o">==</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">version</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">version</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>各种通讯协议的维护,版本兼容性,大型分布式系统升级维护成本,性能低下等等皆是让人头痛的问题,最终它们憋不住了,整了个protocol buffer(以下简称pb)出来,pb主要关注通讯协议本身的设计,充分考虑到了之前的各种问题,并将这些繁文缛节的东西考虑到了设计中.</p>

<hr />

<h2>分析</h2>

<p>想到俺也曾经在一个子系统里整过n种协议的RPC,很痛苦,健壮的协议可以降低复杂系统依赖带来的巨大成本,比如某核心系统升级接口,发现以前DIY的二进制协议难以做到向下兼容,于是乎,得整出两套接口,然后让依赖系统缓慢升级,这个过程需要很多人肉的工作,开发成本,运维成本,安全成本,百人以上的技术团队如果经常有这样的升级,显然开发人员的幸福感会下降的很快.</p>

<h3>Hello world</h3>

<figure class='code'><figcaption><span>example message  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">message</span> <span class="n">Person</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">int32</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">string</span> <span class="n">email</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">enum</span> <span class="n">PhoneType</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MOBILE</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">HOME</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">WORK</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">message</span> <span class="n">PhoneNumber</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">string</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">PhoneType</span> <span class="n">type</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">[</span><span class="k">default</span> <span class="o">=</span> <span class="n">HOME</span><span class="o">];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">repeated</span> <span class="n">PhoneNumber</span> <span class="n">phone</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一些对分析设计有用的信息,field的类型为协议的兼容性提供了参考,数据类型是平台无关的,message可以组合和继承,数据类型丰富,message的描述能力强,高级功能忽略先.</p>

<h3>设计关注点</h3>

<h4>Encoding</h4>

<p>message的编码方式决定了传输的数据大小,传输性能,还有decoding的性能,同时还要兼具扩展性,pb的编码对于数字类型做了很多的优化,基于<a href="https://developers.google.com/protocol-buffers/docs/encoding?hl=zh-CN">BaseVarints</a> 这种变长编码方式对整型数据编码,使用了标志位来标识传输数据单元的长度,对于小于2<sup>28</sup> 的数据来说,这种方式可以减少冗余传输量,对于大于2<sup>28</sup> 的数据最好用fixed类型,否则会多出一个byte.对于负数的优化更难以理解一点,对于varint来说,正数,特别是小正数,可以节省很多的空间,但是对于负数则不然,因为高位总是有标志位,所以必须至少按5个字节来存,但考虑到兼容性,比如int32<->int64之间的转换问题,则总是使用10个字节来varint的存储负数 <a href="https://groups.google.com/forum/?fromgroups=#!topic/protobuf/fU0SVchScA0">why nagetive int always use 10 bytes</a>,官方推荐使用sint这种类型,使用了zigzag这种方式来编码,基本思路是把负数变正数,这样就又可以发挥变长的优势了.基本上协议体内部的数字都是变长的.协议中使用了极少的协议体信息,相对与xml和json,很多元信息都在message中,只要通讯双方有兼容的message即可.这些二进制流在被读取时可以简单的通过一些位运算即可decoding,so性能自然在xml和json之上了.</p>

<h4>Message Extensible</h4>

<p>message定义本身具备较强的扩展性,但要注意类型和field type,否则会带来兼容性问题.</p>

<h4>Multi-Platform</h4>

<p>统一使用了LE编码顺序,message数据类型与平台无关,encoding与平台无关,提供了编译器,针对不同的语言生成stub,跨平台,隐藏细节.</p>

<h4>Compatibility</h4>

<p>message数据类型在encoding过程中考虑了一些兼容性的问题,在对message升级的过程中,常见情况下都是可以满足需求的,但还得好好研究下官方对于message升级的说明,否则可能带来一些困惑.对于持久化的数据来说更要小心.其实在开始设计message的时候应该合理和小心的使用数据类型和字段类型,pb提供了不错的兼容性而无需我们而外coding,但不代表我们可以完全依赖它,总有些情况是无法满足的,所以在设计初期应该考虑到.</p>

<h3>应用场景</h3>

<ol>
<li>复杂分布式环境,良好的兼容性和扩展性,平台无关.</li>
<li>小数据通讯,存储,对于kb级一下的数据,性能较好,但不为大数据准备,如有需要请合理将大数据分片.</li>
</ol>


<h3>问题</h3>

<ol>
<li>小数据通讯</li>
<li>处于发展中,只使用必要功能,除非你深入研究原理</li>
<li>管理好messag</li>
</ol>


<hr />

<h2>总结</h2>

<p>设计总是要把问题规约到某几个核心问题上,放弃华而不实的功能点,放弃建造巴别塔.以核心问题为标准来衡量设计的必要性和设计的关注点.</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.cppblog.com/true/archive/2009/09/11/95873.html">varint的一些编码说明</a></li>
<li><a href="https://developers.google.com/protocol-buffers/docs/encoding?hl=zh-CN">官方说明,注意关于负数的那段</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-gpb/?ca=drs-tp4608">很全面的介绍</a></li>
<li><a href="http://www.searchtb.com/2012/09/protocol-buffers.html">完全做到动态message,当然有代价,是否合理不作讨论</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dalvik内存分配无碎片的思考]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/09/23/shen-ru-li-jie-ji-suan-ji-malloc/"/>
    <updated>2012-09-23T16:56:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/09/23/shen-ru-li-jie-ji-suan-ji-malloc</id>
    <content type="html"><![CDATA[<p>最近看dalvik的gc机制,发现没啥太多资料,但是注意到了dalvik并没有做内存整理,也就是compact阶段,传言内部有一些机制来避免碎片形成,很好奇,分析一下</p>

<h2>一些概念</h2>

<h3>动态内存分配器 dynamic memory allocator</h3>

<p>何为<strong>动态内存分配</strong>,大家知道,在有些时候我们并不能一开始就知道需要用到的内存,比如读取一班级的所有同学信息到一个数组,数组的大小取决于运行时以某种方式查询获知,于是我们需要在运行时分配内存.无论是在vm上跑的java还是在操作系统里跑的c,对于内存的使用都会包含一下的基本部分,栈,固定的分配好的区域,堆,栈里面的数据是操作系统或vm会处理分配和释放,堆(heap)则负责动态内存分配,java和c不同的是jvm使用的<strong>隐式分配器</strong>,而c则是<strong>显式分配器</strong>,区别就是一个有gc,new出来就可以,另一个则由我们自己显式malloc和free.</p>

<h3>碎片</h3>

<p>jvm的<strong>current mark and sweep</strong>收集器提供了可选的compact功能,即整理内存,或者形象点说就是把内存压实,把空的缝隙的给挤掉.这里的碎片指的是<strong>外部碎片</strong>.我们把内存看成一大块连续的内存空间,而且空间可以<strong>伸缩</strong>(<strong>sbrk</strong>),当我们需要使用内存的时候,则在这块空间中寻找合适的位置存放数据,假设我们每次都从heap的头位置开始寻找,一旦找到合适的闲置块就分配,free时则直接标记该块未使用这种方式,进程运行初期总是分配小块内存使用,于是在运行一段时候后,整个heap被分割成了很多的小块,此时如果突然开始出现大数据块的分配请求,则很可能无法找到合适的位置只能请求新的空间.(当然这是malloc极端简单的分配策略)</p>

<p><strong>内部碎片</strong>是相对于外部碎片而言的,讨论内部碎片往往意味着分配器采用了不同于刚刚的分配策略,以<strong>memcached</strong>为例,memcached的内存管理策略是将内存分为不同的classes,假设一个class总长度1m,然后将其等分为固定大小的chunk,比如等分成16份,则每个chunk为64k,一个chunk为最小的分配单元,memcached用<strong>O(1)</strong>(为什么可以做到O(1),用上述的简单内存分配策略能否做到呢?)的时间寻找最合适的chunk来存储数据,但是无论如何分配,每个chunk都很难被100%使用,这就产生了内部碎片.划分classes的方法可以很好的提高分配效率,但同时也需要一些<strong>启发式的策略</strong>来优化内存有效使用率.PS:由于memcached的内存分配很死板,如果内存已经被各种不同chunk大小的classes占满,class分布完成则无法改变,这等于是把启发式策略做了一半,现在貌似在改进了.</p>

<h2>经典</h2>

<ul>
<li>dlmalloc
doug lea大神的作品,参见<a href="http://gee.cs.oswego.edu/dl/html/malloc.html">A Memory Allocator</a>,此文讲的很全面,特别是对于何为优秀的内存分配器,提了八个点.里面的一些分配器实现的理念被后续沿用,算是必读文章之一,不过内容有些滞后,很多dlmalloc后续的更新并没有描述.</li>
<li>jemalloc
增加了对于多核的分配优化,将内存分成不同的Arena,避免部分场景分配时竞争带来的开销,jvm中同样有类似的概念TLAB(Thead local allocate buffer),对于小对象的分配直接在thread独占的区域分配.记得里面还提到了缓存作色的优化.</li>
<li>tcmalloc
类似jemalloc,有些测试结果表明性能更好,缺点是需要关注内存的有效使用率,分配速度和内存有效使用率是分配器设计时需要取舍的.PS:如果想研究分配器,可以读读代码,应该很不错.</li>
</ul>


<h2>分配器总结</h2>

<p><strong>多核,多线程</strong>的分配优化,<strong>缓存作色</strong>,内存有效使用率(使用划分固定大小chunk的机制会提高分配的效率,降低分配高性能实现的复杂度,但不可避免的会有内存有效使用率的问题,需要一些启发式的优化策略,具体取舍看场景,内存很宝贵则可以在分配速度上让步,二者难以兼得,相关知识建议直接看深入理解计算机相关章节,想挖坑的可以看论文),这些问题都是现代分配器高性能的关键词.</p>

<h2>题外话</h2>

<p>回过头来看jvm,为啥老有碎片呢&#8230;难道是为了顾及一次书写,到处执行，so内部实现的内存管理实现的通用内存分配来跨平台?问题很多哇,可时间不多~,后续研究，碎叫~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android菜鸟的吐槽3]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/09/14/dalvik-gckai-pian/"/>
    <updated>2012-09-14T15:08:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/09/14/dalvik-gckai-pian</id>
    <content type="html"><![CDATA[<p>android关于dalvik的资料显得不是很全,像我这种写服务端代码写惯了的,突然换到android下面写java代码,基本也算是两眼一抹黑.</p>

<p>2010 google I/O关于加入JIT的介绍,而后则很少有介绍后续的发展,搞的我很难写代码,以前的知识都成了写代码的习惯思考,而且JVM关于JIT的优化相对成熟,处于发展而不是变化的阶段,但是android的性能最佳实践中提到的东西,貌似随着版本的发布有不少的变化,所以很难作为代码优化的参考.关于gc方面的资料就更加的少,特别是涉及到细节,只能看代码和借助内部的一些debug工具,感觉上dalvik未来还会有很多的发展和改进空间..</p>

<p>这几天查阅了一些关于dalvik的资料,blog,还没深入看代码,先提供一些所谓的直观感觉,后续有空在dalvik的gc部分代码基础上再记录一些细节吧.(开篇也许就是结局篇)</p>

<h3>Algorithm</h3>

<p>貌似使用了基本的mark-and-sweep来实现,但是没有compact,很经典的实现,早期的IBM JDK1.4就采用了该算法,提供compact和增量收集.貌似性能最佳实践中也提到了pre-thread allocation pool,降低了临时对象分配的开销,使用dlmalloc(bionic lib中的版本)来分配内存,doug lea大神再次出现了&#8230;&#8230;..<a href="http://gee.cs.oswego.edu/dl/html/malloc.html">大神的作品</a>,有些过时,但在当时看来应该是篇神作.</p>

<h3>Fragmentation</h3>

<p>没有compact,可能会面临fragmentation的问题,对于长时间运行的程序来说,该问题有可能存在,dlmalloc使用了chunk块来尽量避免外部fragmentation问题,出现问题只能在应用层考虑如何避免,没有查到关于后续实现generation based的信息,对于管理几十兆内存来说,mark-and-sweep应该是合理的,足以应付大多数的情况.</p>

<h3>coding</h3>

<p>官方关于memory的最佳实践有多大的参考价值呢?只是强调不要创建无用的对象,而刚刚提到的fragmentation问题只字未提.</p>

<pre><code>Avoid Creating Unnecessary Objects

Object creation is never free.A generational GC with per-thread allocation pools for temporary objects can make allocation cheaper, but allocating memory is always more expensive than not allocating memory.

If you allocate objects in a user interface loop, you will force a periodic garbage collection, creating little "hiccups" in the user experience. The concurrent collector introduced in Gingerbread helps, but unnecessary work should always be avoided.

Thus, you should avoid creating object instances you don't need to. Some examples of things that can help:

If you have a method returning a string, and you know that its result will always be appended to a StringBuffer anyway, change your signature and implementation so that the function does the append directly, instead of creating a short-lived temporary object.
When extracting strings from a set of input data, try to return a substring of the original data, instead of creating a copy. You will create a new String object, but it will share the char[] with the data. (The trade-off being that if you're only using a small part of the original input, you'll be keeping it all around in memory anyway if you go this route.)

A somewhat more radical idea is to slice up multidimensional arrays into parallel single one-dimension arrays:

An array of ints is a much better than an array of Integers, but this also generalizes to the fact that two parallel arrays of ints are also a lot more efficient than an array of (int,int) objects. The same goes for any combination of primitive types.
If you need to implement a container that stores tuples of (Foo,Bar) objects, try to remember that two parallel Foo[] and Bar[] arrays are generally much better than a single array of custom (Foo,Bar) objects. (The exception to this, of course, is when you're designing an API for other code to access; in those cases, it's usually better to trade good API design for a small hit in speed. But in your own internal code, you should try and be as efficient as possible.)

Generally speaking, avoid creating short-term temporary objects if you can. Fewer objects created mean less-frequent garbage collection, which has a direct impact on user experience.
</code></pre>

<p>我没有感觉到有啥价值,看官方介绍不如把effective java多读几遍,对大对象分配和循环内部的对象创建小心一点,热点代码注意分析.特别是对于应用会申请大内存又会销毁,这种情况可以在应用层提供大对象复用的缓存机制,避免被销毁,而是一直使用,通过应用层代码来控制大对象空间的存取.否则,随意的大对象分配和销毁对于长时间运行的App来说就是个灾难.或者就只能往NDK上面想办法了,NDK还不太了解,内存应该不计算在heap内的吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android菜鸟的吐槽1]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/09/09/android-gao-xiao-he-oozhi-jian-de-xuan-ze/"/>
    <updated>2012-09-09T22:33:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/09/09/android-gao-xiao-he-oozhi-jian-de-xuan-ze</id>
    <content type="html"><![CDATA[<p>近期一直忙于写android应用的代码,其实我没有看完过任何一本android的著作,虽然说书籍收集了也
不少了,但很少完整的去看,有时候发现最靠谱的还是官方文档和一些实践性的书籍或者blog,通常工作
中是遇到问题,查资料,然后解决问题,在这个过程中慢慢发现其实写android的代码很有挑战性,要关注
的东西很多,比如:</p>

<ol>
<li><p>程序本身的高效,高效意味着更短的延迟,用户更好的体验.</p></li>
<li><p>网络的开销,比如官方<a href="http://developer.android.com/training/efficient-downloads/efficient-network-access.html#RadioStateMachine">这篇</a>关于网络对于电量的影响</p></li>
<li><p>异步处理,费时操作都得异步,否则UI就block了,再过几秒系统就提示无反应了,最坏的结果就是被直接拖到垃圾桶.</p></li>
</ol>


<p>在这里我就不说后两点的,主讲第一点,也就是程序效率的本身,高效和OO之间似乎有些矛盾,当然这种问题
在java领域已经越来越不明显,因为java server级的JIT(Just In Time Compiler)已经为我们做了
足够多的工作,而我们都是坐享其成,如果没有inline优化,你们敢想一个方法不超过5行吗?for循环我们
很少去手动提取不变量了,因为JIT总是能帮我们找到hot的loop并优化掉,而一些非热点且低效代码,则被
超强的机器性能所掩盖.而对于dalvik,情况发生了变化,一切似乎回到那个资源无比紧缺的时代,系统的设
计需要考虑移动设备的特点和dalvik本身.</p>

<p>在这个<strong>时代</strong>写代码除了算法加数据结构,我们还有很多问题要关注,因为这个时代的主流不再是孤胆英雄式的
程序员,更多的需要依赖团队开发,对于公司来说,代码的可维护性并不比高效的分量轻多少,而在android上
很多优化都是具有版本和硬件的亲和性,不同的版本,不同的硬件也许有完全不一样的结果,所以一个优化值不
值得做是个需要好好思考的问题,而我个人对于这个问题的建议是:</p>

<ol>
<li><p>优化方案本身的生命力
比如getter,setter的性能问题,早期dalvik的getter,setter确实比直接读写成员性能要差很多
但这个优化有些逆天了,而且长远来看这种问题被内置优化的可能性较大,故在可忍受的范围内可以优化
但不能作为普遍使用的技巧,否则就颠覆了OO的封装,随意修改私有对象状态倒是无所谓,如果是共享的
那就&#8230;.</p></li>
<li><p>优化是否有必要
很多时候我们未必需要按官方的建议优化,比如绝大多数的app都不会占据太多的CPU,当然如果是一些
游戏的话&#8230;所以我们大可不必过于的关心一些优化代码的技巧,let it go~,写出你认为更美观的代
码才是绝大多数情况下我们要考虑的问题.</p></li>
<li><p>如果必须要优化,泡好一杯茶,打起精神,尽量将优化对于系统整体的影响降到最低程度.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阅读软件体验]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/08/19/yue-du-ruan-jian-ti-yan/"/>
    <updated>2012-08-19T14:07:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/08/19/yue-du-ruan-jian-ti-yan</id>
    <content type="html"><![CDATA[<p>最近一直在使用阅读软件,一直在用的网易云阅读,试用了zaker,体验了flipboard,记录一下自己的体会</p>

<h2>使用需求</h2>

<p>看书,涉及自传,心理学,偏通俗一点的哲学书,名著等等(碎片时间和非舒适环境阅读),看资讯,涉及科技,工业设计,互联网,创业,技术,看英文,最好有高质量的英语资讯,这样英文阅读和知识获取两不误,有一定的社交功能,比如分享,收藏,但不喜欢拿它看微博和blog,看微博有专门的工具,看blog需要块状时间用来记录和整理知识.</p>

<h2>使用经过</h2>

<ul>
<li><p>网易云阅读
这款软件是最早在手机上安装的,一直在使用,内容很全面,报纸,新闻,资讯,书籍,社交信息等等,功能上很全面,界面很传统(在国内,同类应用很多都长得很像,前两天我在手机上用app看微博,无意发现app的界面和咱公司开发的xx应用从界面布局到颜色到交互都几乎一样,最近有些不同了,因为咱抄袭了国外的应用),书籍不够丰富,估计版权问题很难解决,能分享,很收藏,满足需求.</p>

<p>用它我利用坐火车时间看完了钢铁是怎样练成的(没看太明白,觉悟不够啊),阅读了一些互联网资讯,社交功能几乎没用,最近用来看一些英文资讯,有些小bug,不过不影响整体印象</p></li>
<li><p>zaker
功能几乎与网易雷同,内容有微小的差异,主要是网易可以整合自己的资源,比如网易公开课,社交功能很不方便,体验较差,从名字和App的界面风格来比较,比网易更<strong>怀型</strong>,很现代,当然从阅读内容的订阅排名来看,也确实现代,美空流排名普遍靠前</p>

<p>只是试用了一下,除界面眼前一亮,没什么特别的,感觉用户与之互动较少,很少有人留言,这样信息的&#8221;协同过滤&#8221;就无法发挥作用了.</p></li>
<li><p>flipboard
交互体验最好&#8211;道法自然,内容可DIY,貌似没有书籍阅读,信息质量高.</p></li>
</ul>


<h2>分析&amp;比较</h2>

<p>网易和zaker的核心理念在平台加整合辅以社交,它们都提供了一个阅读的入口,通过线下合作的方式与各种媒体,社交工具整合来提供信息,提供了基本的社交功能,比如分享,评论等.现阶段感觉最大的问题在于信息的数量和质量难以平衡,由于缺乏&#8221;协同过滤&#8221;,往往只能看标题来筛选文章,比较浪费时间,不适合阅读兴趣广泛的人,信息质量差导致碎片时间的利用率较低.</p>

<p>flipboard,社交性较强,信息经过了社交化的&#8221;智能&#8221;过滤,质量较高,交互好,界面美,可以DIY,推荐试用~</p>

<h2>总结</h2>

<p>这一比较,俺选择进一步试用flipboard,多嘴一句,巴神投资传统媒体我感觉很对的啊,借卡斯帕罗夫的一句话&#8221;有些事只能人做的好,有些事要人和电脑合作才能更好&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Positive Psychology 自我体验]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/08/19/harvard-positive-psychology/"/>
    <updated>2012-08-19T14:06:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/08/19/harvard-positive-psychology</id>
    <content type="html"><![CDATA[<h2>性格的形成</h2>

<p>从小我就不是在一个所谓的良好家庭环境下长大的孩子,小时候暑假常常一个人在家一待就是一天,儿时的玩伴
都搬走了,偌大一个贫民窟就没个朋友说说话,小学还是一天真无邪的孩子,到初中因为某些原因变得比较沉默
父母都忙于生计,很难与我有太多的交流,除了考试成绩以外.</p>

<p>儿时一些成长过程中遇到的问题无法对外排解,例如</p>

<ol>
<li>没有太多朋友,附近朋友很少,有的要走很远</li>
<li>打小就害羞,一直没改过来</li>
<li>懵懂期思想居然还很超前,遇到一些那时所谓的感情问题,也无法排解</li>
<li>好不容易混到大学(痛恨应试教育),受到很多刺激,开始玩游戏,生活没有目标,颓废</li>
<li>大学快读完发生若干件大事,一些跟生老病死有关,一些跟感情有关</li>
</ol>


<p>自此,性格已成,22岁,跟同龄人比较自我感觉快被社会所抛弃,但种种刺激让我开始想要奋斗,但是目标却很功利
因为我还没有特别的明确的目标,只是不想甘于人后.但在此时,儿时的种种经历带给了我极大的阻力,这种性格上
的某些问题很难快速改变,我也因此付出了很多,去逐步改进自己,但有一点,我一直难以克服,那就是消极,或者说
通俗点,就是遇到问题,总是朝坏的方向想,这一想压力就大,动力就小,看待身边的人和事都以一种消极的态度,
于是人生都变得很灰暗,消极带来的破坏力不可想象,但确难以客服,乐观对我来说是一种奢望.</p>

<h2>反击</h2>

<p>而后,不断付出,不断努力,比别人更努力,我看到了一些回报,有了一些信心,但总结下来,发现自己很多时候,受困
于内向的枷锁,我很容易自己给自己设置一个障碍或者说是牢笼,很多事其实跟我想象中的完全不同,我的大脑虚构了现实,消极的态度让我的这些想象变成了牢笼,我开始看一些心理学的书籍,同时看很多的励志电影,印象中最为深刻的当然是洛奇1-6,特别是6中的父子对话,每次看到都是哭点,这种知道自己错了但难以纠正的痛不是每个人都能经历.生活就像拳击,不在乎你能挥出多重的拳,而是你能挨多重的拳,并且予以还击,我也不是一个懦夫,我必须前进,我必须克服我的心态!</p>

<p>我尝试学会感激,感激身边的每一个人,它们有些给我带来快乐,有些带来痛苦,无论快乐或者痛苦我都去体会,去享受生命的这个过程,从快乐中体会知足,从痛苦中吸取养分.我尝试对所有人说真心话,真诚的面对它们,说出我认为正确的话,去帮助它们,但我不会强求,只是做到就好.</p>

<p>自我认识到教育是这个社会唯一希望的时候,我就开始有计划的捐助教育,贫困的或者是某些民间教育机构,当然我会自己调查一遍.每当我得到较多的收入时,比如年终奖,我都会选择去捐助,星星之火可以燎原,教育眼下是唯一的
希望,就像我们的人类的造血功能,新陈代谢,当下无论如何我们也希望能在下一代播下种子,至少这是我个人思考很久才明白的,也是唯一能从根本去改变现状的方法.</p>

<p>尝试不逼迫自己去改变,而是创造一些可以改变的条件,例如工作中做小团队管理,有了环境和条件,很多潜能被激发,习惯慢慢潜移默化的改变.</p>

<p>读很多的书,特别关注一些思想层面的,比如中国传统的儒家道家思想,素书等,印度大师克里希那穆提的重新认识你自己,我现在已经可以比较习惯的像照镜子一样和自己相处,很多思维的陷阱都被我发现并克服.以后的人生就是不断在这些的基础上修正自己.</p>

<p>认识一些朋友,从不同的朋友那里找到自己感情的出口,感情没有出口即使是很小的问题最后也会被无限放大,这是我很多次痛苦的回忆体会到的.所以有些不同类型的朋友很重要,有时候你需要破口大骂,有时候需要有人帮你理智的分析,虽然我朋友不多,但我有一个原则,对人真诚,说实话,这点不会变,因为信任,所以简单.</p>

<h2>最高境界</h2>

<ul>
<li>学会在大热天,走路上汗流浃背的时候欣赏阳光下的荧光闪烁的绿叶</li>
<li>学会从失败后发现到自己的成长</li>
<li>学会用自己的方式表达你的感情,别压抑,无论是亲情还是有友情,爱情,基情&#8230;.</li>
<li>学会发现生活中最常见的东西,美!而不是因为有了压力而去关注在腐败的东西</li>
<li>最后,学会发自内心的说:世界多么美好~</li>
</ul>


<h2>最后</h2>

<p>积极和消极是相互依存的,学会与它们好好相处并运用它们帮助自己.</p>

<p>生命是一种体验,我们都是在路上,如果忘了看风景,岂不白白浪费了生命.</p>

<hr />

<p><strong>参考</strong></p>

<ul>
<li> <a href="http://book.douban.com/subject/1011215/">论语别裁上下</a></li>
<li> <a href="http://book.douban.com/subject/1489670/">老子他说</a></li>
<li> <a href="http://movie.douban.com/subject/1295742/">洛奇1</a></li>
<li> <a href="http://movie.douban.com/subject/1295742/">洛奇6</a></li>
<li> <a href="http://v.163.com/special/sp/positivepsychology.html">哈佛幸福课</a></li>
<li> <a href="http://movie.douban.com/subject/1292656/">心灵捕手</a></li>
<li> <a href="http://book.douban.com/subject/1005193/">重新认识你自己</a></li>
<li> <a href="http://book.douban.com/subject/3465962/">素书</a></li>
<li> <a href="http://book.douban.com/subject/3054821/">渴望生活</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking in git]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/08/15/thinking-in-git/"/>
    <updated>2012-08-15T23:57:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/08/15/thinking-in-git</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>最近工作中用到git,本着遇到什么学什么的精神,最近看了看git相关的资料和一些blog,将一些学习方法和结论总结一下.</p>

<h3>头疼的命令</h3>

<p>在初次使用git时,我感觉这东西是个不太易用的东东,概念复杂,命令复杂(这还是被封装过的,用底层命令完全得理解整个系统的来龙去脉才有可能).</p>

<p>很多blog会介绍一些fast food,比如本地仓库和远程仓库diff,然后贴个命令上去&#8230;.有些时候命令未必靠谱(原因是git命令复杂,贴出来的命令未必真适应你的场景),最后搞的我只有祭出GUI来完成日常工作,实在是悲催.</p>

<h4>方法 双管齐下!</h4>

<p>工作中的常用命令通过查blog,man doc学习,工作时不拘泥于命令的复杂使用,而是快速学会常用命令,了解基本概念(个人觉得git社区版介绍不错<a href="http://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=0CFcQFjAB&amp;url=http%3A%2F%2Fgitbook.liuhui998.com%2F&amp;ei=SsorUIvVFoyRiQel4YDoDA&amp;usg=AFQjCNHVw05olZNWF6IDNhFykqVQNkN5wg">git社区版</a>,git pro入门看感觉一般).</p>

<p>对于git这么久经考验的开源系统而言,不了解底层原理,和其他vcs产品的异同,设计的理念,发展过程,产品现状等等,那就算是白用了,而且芥末优秀的产品对于学习产品架构设计很有借鉴意义,对于此我个人推荐<a href="http://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=0CFoQFjAB&amp;url=http%3A%2F%2Fishare.iask.sina.com.cn%2Ff%2F23222298.html&amp;ei=WMsrULvDB6aciAevuoCgDg&amp;usg=AFQjCNGecM96Vuaa7rQGtyyGzlLNvk3hYw">The Architecture of Open Source Applications volume II</a></p>

<hr />

<p>先写到这,后续补充</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/08/12/hello/"/>
    <updated>2012-08-12T09:51:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/08/12/hello</id>
    <content type="html"><![CDATA[<p>介于微博的极度不河蟹,改为上推,看到某人的blog发现自己out了,现在都用github搭blog了,于是我就折腾了一个,安了个新家,以下内容完全是对markdown语法的练习</p>

<p>折腾了半天遇到个编码问题,不知道为啥ruby默认用了GBK,搞了半天发现term设置的GBK,而我一般用iterm&#8230;忘了这个点啊&#8230;..</p>

<p>编码</p>

<hr />

<p>&copy;</p>

<p>AT&amp;T</p>

<p>标题</p>

<hr />

<h1>this is title 1</h1>

<h2>this is title 2</h2>

<h1>this is title 1</h1>

<h2>this is title 2</h2>

<h3>this is title 3</h3>

<h4>this is title 4</h4>

<h5>this is title 5</h5>

<h6>this is title 6</h6>

<p>缩进</p>

<hr />

<blockquote><p>this is a blockquote</p>

<blockquote><p>test</p></blockquote>

<p>this is a blockquote
with lazy mode</p></blockquote>

<p>列表</p>

<hr />

<ul>
<li> test</li>
<li> test</li>
<li><p> test</p></li>
<li><p>test</p></li>
<li>test</li>
<li><p>test</p></li>
<li><p>test</p></li>
<li>test</li>
<li><p>test</p></li>
<li><p>1</p></li>
<li>2</li>
<li><p>3</p></li>
<li><p>so funny beginning</p></li>
</ul>


<p>1986. you can escape it</p>

<hr />

<pre><code>print "hello world!"
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="s">&quot;hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>horizontal rules</h2>

<hr />

<hr />

<hr />

<h2>link</h2>

<p><a href="http://dongsongjie.cn" title="Songjie Dong's homepage">I&#8217;m a link</a></p>

<h2>强调</h2>
]]></content>
  </entry>
  
</feed>
