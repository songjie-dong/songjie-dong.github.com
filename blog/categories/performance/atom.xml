<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: performance | All Things Coding]]></title>
  <link href="http://songjie-dong.github.com/blog/categories/performance/atom.xml" rel="self"/>
  <link href="http://songjie-dong.github.com/"/>
  <updated>2013-07-08T17:55:47+08:00</updated>
  <id>http://songjie-dong.github.com/</id>
  <author>
    <name><![CDATA[Songjie Dong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Big List Of 20 Common Bottlenecks]]></title>
    <link href="http://songjie-dong.github.com/blog/2013/04/01/big-list-of-20-common-bottlenecks/"/>
    <updated>2013-04-01T20:04:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2013/04/01/big-list-of-20-common-bottlenecks</id>
    <content type="html"><![CDATA[<h2>tips</h2>

<p>翻译水平有待提高.部分内容添加了个人的理解.</p>

<h2>前言</h2>

<p>在<a href="http://highscalability.com/blog/2012/2/27/zen-and-the-art-of-scaling-a-koan-and-epigram-approach.html">Zen And The Art Of Scaling - A Koan And Epigram Approach</a>这篇文章中,Russell Sullivan提出了一个有趣的猜想:存在20个经典的瓶颈.这听起来疑似那个"只有20个基本的故事情节"的想法.这完全取决于你看瓶颈的视角,也许这个想法是对的,但实践过程中我们都知道瓶颈来自于无穷的"味道",所有的酸和灰.</p>

<ul>
<li>chunkify这个单词翻译的太纠结了,没明白啥意思,先意会一下吧.</li>
<li>酸我能理解是个味道,灰是啥.......</li>
<li>sullivan在分布式数据库方面很牛,Alchemy Database没怎么研究过呢还,但是卖点是混合型数据库,貌似是redis+server side script实现,参考<a href="http://highscalability.com/blog/2012/2/27/zen-and-the-art-of-scaling-a-koan-and-epigram-approach.html">zen and the art of scaling</a></li>
</ul>


<p>有一天<a href="http://jsoftbiz.wordpress.com/">Aurelien</a>发送了他的瓶颈列表给我, 我们cc给了Russell,他给了我他的列表,我也有一份列表,于是产生了一份石头汤</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Stone_Soup">石头汤</a></li>
</ul>


<p>Russell说这是他的"我希望在我年轻的时候我知道"列表,我想应该用一种不断充实的方式来看待它:拥有更多的经验,处理更多不同类型的项目,会有更多的教训你能够添加到这份列表中.当你读到这份列表,并且制作自己的列表时,你正在通过多年积累的经验和一点点挫折而不断变强,并且其中每一条都有一个故事值得grokking.</p>

<ul>
<li>grokking 实在是无法用一个词汇来描述....</li>
</ul>


<h2>瓶颈的个人理解</h2>

<h3>Database:</h3>

<ul>
<li><p>Working size exceeds available RAM</p>

<p>工作内存超过了系统可用的内存,可能会大量出现malloc失败或者触发swap区不断的换入换出,或者触发内存碎片整理这种成本较高的动作.对于数据库来说,性能应该会下降的很快,这个不用说,内存总是比硬盘快.基本上离挂不远.</p></li>
<li><p>Long &amp; short running queries</p>

<p>耗时较长的查询会占用系统资源一段较长的时间无法释放,会带来性能的波动.通常来说,业务上对于数据查询的场景是属于OLTP or OLAP需要分析清楚先,并以此作为技术选型的评估因素之一.</p></li>
<li><p>Write-write conflicts</p>

<p>大量的并发写冲突问题,此问题我分为两种情况:对系统整体的影响,热点的问题.</p>

<ul>
<li><p>整体的影响如何解决?</p>

<p>Sharding strategies often involve two techniques: partitioning and replication. With partitioning, the data is divided into small chunks and stored across many computers. Each of these chunks is small enough that the computer that stores it can efficiently manipulate and query the data. With the other technique of replication, multiple copies of the data are stored across several machines. Since each copy runs on its own machine and can respond to queries, the system can efficiently respond to tons of queries for the same data by adding more copies. Replication also makes the system resilient to failure because if any one copy is broken or corrupt, the system can use another copy for the same task.</p></li>
<li><p>热点</p>

<p>scale up性能,比如数据库热点数据,可以单独拿出来提供服务.热点操作的针对性优化,比如对于计数器场景,cpu做必要的优化,写可以用thread local or array + padding.</p></li>
</ul>
</li>
<li><p>Large joins taking up memory</p>

<p>尽量避免两张大表join,将sql拆开为两次简单查询是一种解救办法,但可能会出现too much short running queries问题,需要结合性能数据分析权衡ROI
.</p></li>
</ul>


<h3>Virtualisation:</h3>

<p>这个领域...比较小白啊,先放着</p>

<ul>
<li><p>Sharing a HDD, disk seek death</p></li>
<li><p>Network I/O fluctuations in the cloud</p></li>
</ul>


<h3>Programming:</h3>

<ul>
<li><p>Threads: deadlocks, heavyweight as compared to events, debugging, non-linear scalability, etc...</p></li>
<li><p>Event driven programming: callback complexity, how-to-store-state-in-function-calls, etc...</p>

<p>callback的复杂性:callback有两种,block callback&amp;async callback,通常这种模式提供给模块使用者,来扩展已有功能的一种方式.我个人感觉上callback对于一些严谨的模块维护者来说,侵入性较强,难以控制.模块使用者会比较容易写出破坏接口语义的实现,特别是对于async的接口.</p>

<p>store state...不知所云</p></li>
<li><p>Lack of profiling, lack of tracing, lack of logging</p>

<p>使用成熟的工具,提供profiling是必须的.
跟踪---分布式环境跟踪是个问题,事件需要统一收集和分析,etc..kafka
logging --例子很多了.不用一台台scp download日志,否则会疯了.</p></li>
<li><p>One piece can't scale, SPOF, non horizontally scalable, etc...</p>

<p>可扩展性是架构设计需要解决的基本问题,但也是非常复杂的问题,无状态,分区可扩展性.</p></li>
<li><p>Stateful apps</p>

<p>有状态就可能涉及到状态的持久化问题,同时状态的可靠性持久化需要一些复杂的的机制来保证:write ahead logging, quorum, replication,raid,paxos etc...</p></li>
<li><p>Bad design : The developers create an app which runs fine on their computer. The app goes into production, and runs fine, with a couple of users. Months/Years later, the application can't run with thousands of users and needs to be totally re  architectured and rewritten.</p>

<p>这事天天发生</p></li>
<li><p>Algorithm complexity</p>

<p>复杂意味着维护性问题,可扩展性问题,调优问题.</p></li>
<li><p>Dependent services like DNS lookups and whatever else you may block on.</p>

<p>前端性能优化...域名可以拆分,但不能过多.</p></li>
<li><p>Stack space</p>

<p>栈还是有开销的....特别是对于线程创建后的栈固定分配时,线程创建的开销还是不可忽视的,虽然有所谓的copy on write优化...
无其他想法了,除了line优化降低栈深度.</p></li>
</ul>


<p>以后在补充吧.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[循环效率的纠结]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/11/08/xun-huan-xiao-lu-de-jiu-jie/"/>
    <updated>2012-11-08T10:13:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/11/08/xun-huan-xiao-lu-de-jiu-jie</id>
    <content type="html"><![CDATA[<h2>纠结</h2>

<p>两个嵌套的循环,一个假设10000000次,一个假设100次,把两个循环次数颠倒一下,是否存在性能差异的问题.</p>

<h2>解释执行</h2>

<p>从代码来分析,如果外层循环较大,则内层循环的循环变量会被更多次的使用,这是个隐性的开销,而内层循环里的代码,在两种情况下执行指令的次数是一致的,所以外层循环较大则性能较差.</p>

<h2>JIT</h2>

<p>通常循环达到一定的次数回边计数超过阀值,则触发JIT编译,而后上述基于栈的指令体系下出现的指令数差异则不复存在了,而需要看编译后的差异,这个差异在不同的机器上表现有些不一样,即使是同样的环境,而会略有不同,但用perf分析后,发现执行的指令数,耗时,分支预测错误率,线程cpu迁移都没有数量级的差异.可以说性能基本一致.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDB学习笔记]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/10/11/bdbxue-xi-bi-ji/"/>
    <updated>2012-10-11T11:37:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/10/11/bdbxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>Berkeley DB (DB)是一个高性能的，嵌入数据库，和C语言，C++，Java，Perl，Python，PHP，Tcl以及其他很多语言都有绑定。Berkeley DB可以保存任意类型的键/值对，而且可以为一个键保存多个数据。Berkeley DB可以支持数千的并发线程同时操作数据库，支持最大256TB的数据，广泛用于各种操作系统包括大多数Unix类操作系统和Windows操作系统以及实时操作系统。</p>

<p>在工作中使用的是java版本的bdb( Berkeley DB 以下简称为bdb)，主要用来存储计算结果提供给业务系统访问，比如数据挖掘的结果，这类数据定期会刷新，访问形式单一，存在数据库有点大材小用，另外就是存储大量的计算中间结果。总体来说bdb的性能非常不错，但在使用时还是遇到了一些问题，总结一些经验教训</p>

<h3>问题1：定期build大量计算结果</h3>

<p>实际使用时，写入千万数据后，写入性能急剧下降，但硬盘还在飞转，调节了很多的系统参数，关闭了事务，调大了btree索引缓存(根据bdb内部的DbCacheSize工具调节)，jvm启动参数等等(怀疑是fgc的问题)，都没有解决问题，最后调节了写入数据的顺序才解决了问题，一开始我们没有对写入数据的key排序，而随机写入大量数据导致了btree索引性能的下降，改为顺序写入后，问题解决。那如何解释硬盘飞转呢，其实是由于写操作频繁触发btree结构调整导致。</p>

<h3>问题2：性能测试出现少量lock timeout，软硬件环境不同出现的次数也不同</h3>

<p>默认的locktimeout是500ms，而我们在并发读写的性能测试时出现了少量的timeout情况，32位环境（jdk1.5）下较少，64位环境(jdk1.6)下较多，500ms的timeout，在非高性能要求的环境下，貌似还是短了点。问题是为什么对于不同的环境，出现timeout的次数差距较明显，多次测试发现32位环境出现的较少，64位环境出现的较多，com.sleepycat.je.util.DbCacheSize这个工具让我发现了一些线索，原来我一直以为这个工具就是粗略根据分支节点大概的大小，总数据量，key大小就可以帮助我们计算出大致的索引cache size，比如1000万数据，key长20byte的cache size：</p>

<pre><code>Inputs: records=10000000 keySize=20 dataSize=8092 nodeMax=128 density=80% overhead=10%
Cache Size      Btree Size  Description
871,284,622     784,156,160  Minimum, internal nodes only  
1,180,450,133   1,062,405,120  Maximum, internal nodes only  
91,537,951,288  82,384,156,160  Minimum, internal nodes and leaf nodes  
91,847,116,800  82,662,405,120  Maximum, internal nodes and leaf nodes  
Btree levels: 4 
</code></pre>

<p>这个是在mac下的测试结果，而在32位的ubuntu下测试minimum internal nodes需要501M，主要的原因是由于在不同的环境对应的java对象占用内存大小不一致，而java本身没有提供动态检测对象占用内存大小的方法，在bdb中MemoryBudget类里面定义了不同环境下对应的常用对象的大小，所以，如果用同样的cachesize配置，在不同的环境下会表现出不同的性能，因为如果设置小了会导致部分索引的操作无法命中缓存，性能会有所下降，所以我推测timeout的频率不同的原因是由于固定的cachesize在不同的环境性能也会不同而导致。</p>

<h3>问题3：数据build需要注意的</h3>

<p>对于大数据量写入bdb，同时需要把数据文件跨地区传输时，有一个小的tips，就是在你build完数据以后，close environment后，重新开启一个只读的environment，设置启动参数：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">je</span><span class="o">.</span><span class="na">env</span><span class="o">.</span><span class="na">runCleaner</span> <span class="err">＝</span> <span class="kc">false</span>
</span><span class='line'><span class="n">je</span><span class="o">.</span><span class="na">cleaner</span><span class="o">.</span><span class="na">minUtilization</span> <span class="err">＝</span> <span class="mi">90</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span> <span class="o">(</span><span class="n">environment</span><span class="o">.</span><span class="na">cleanLog</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;clean log &quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="n">CheckpointConfig</span> <span class="n">cleanCheckpointConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CheckpointConfig</span><span class="o">()</span>
</span><span class='line'><span class="n">cleanCheckpointConfig</span><span class="o">.</span><span class="na">setForce</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="n">environment</span><span class="o">.</span><span class="na">checkpoint</span><span class="o">(</span><span class="n">cleanCheckpointConfig</span><span class="o">);</span>
</span><span class='line'><span class="n">environment</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>加上如上代码，这样就可以清除掉大部分废弃的log信息，把文件缩小，这样传输时间会省不少，特别在带宽受限的情况下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nagle 算法]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/10/10/nagle-suan-fa/"/>
    <updated>2012-10-10T16:55:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/10/10/nagle-suan-fa</id>
    <content type="html"><![CDATA[<p>在各种场合看到涉及网络通讯的代码时,总会到到TCP_NODELAY的设置,也就是绕过nagle算法,虽然了解这个算法的基本原理,但一直没有机会追根述源,看wikipedia上关于nagle算法的介绍,很详细,所以也懒得分析,直接简单翻译并记录一下该算法,以免后续总问自己这算法到底能功能用在哪?</p>

<h2>介绍</h2>

<p>nagle算法以其发明者john nagle命名,该算法通过减少在网络上传输的包来改进网络上传输的效率.</p>

<p>nagle在文档:Congestion Control in IP/TCP Internetworks中描述了所谓的"small packet problem", 即当一个应用重复发送小块数据,通常大小只有1个byte.TCP的包体中有40byte的header(20byte的TCP信息,20byte的ipv4信息),而这会导致41个byte的包只有一个byte的有用信息,这是一个巨大的开销.这种情况常常出现在使用telnet会话时大部分键盘输入会生成一个byte有效数据并被立即传输时,更坏的是在慢速网络环境下,大量这样的包会在同一时间传输,会潜在的导致拥塞崩溃.</p>

<h2>pseudocode</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">there</span> <span class="n">is</span> <span class="k">new</span> <span class="n">data</span> <span class="n">to</span> <span class="n">send</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">the</span> <span class="n">window</span> <span class="n">size</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="n">MSS</span> <span class="n">and</span> <span class="n">available</span> <span class="n">data</span> <span class="n">is</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="n">MSS</span>
</span><span class='line'>    <span class="n">send</span> <span class="n">complete</span> <span class="n">MSS</span> <span class="n">segment</span> <span class="n">now</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">there</span> <span class="n">is</span> <span class="n">unconfirmed</span> <span class="n">data</span> <span class="n">still</span> <span class="n">in</span> <span class="n">the</span> <span class="n">pipe</span>
</span><span class='line'>      <span class="n">enqueue</span> <span class="n">data</span> <span class="n">in</span> <span class="n">the</span> <span class="n">buffer</span> <span class="n">until</span> <span class="n">an</span> <span class="n">acknowledge</span> <span class="n">is</span> <span class="n">received</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">send</span> <span class="n">data</span> <span class="n">immediately</span>
</span><span class='line'>    <span class="n">end</span> <span class="k">if</span>
</span><span class='line'>  <span class="n">end</span> <span class="k">if</span>
</span><span class='line'><span class="n">end</span> <span class="k">if</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>问题</h2>

<p>80年代初,有个组织提交了名为TCP Delayed Acknowledgment的算法,该算法会合并多个ack包以达到提升效率的作用,最大的ack延迟为500ms.当两个算法同时启用时,出现write-write-read的顺序时则由于第二个写可能的延迟导致read时间过长.由于这个原因,TCP实现提供了一些应用接口来关闭nagle算法,通常这个可选项名为TCP_NODELAY.(关于write-write-read带来的问题还有些不是很清晰)</p>

<p>nagle算法适用于任何大小的数据,如果一次写请求需要发送的包跨度为 2n packets,则最后的数据包会被buffer,直到收到前一个包的ack消息,延迟会增加上百ms,而且是由于这个算法导致了额外的开销.如果数据大于一个packet时,requester或responser最好都关闭该算法.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android菜鸟的吐槽1]]></title>
    <link href="http://songjie-dong.github.com/blog/2012/09/09/android-gao-xiao-he-oozhi-jian-de-xuan-ze/"/>
    <updated>2012-09-09T22:33:00+08:00</updated>
    <id>http://songjie-dong.github.com/blog/2012/09/09/android-gao-xiao-he-oozhi-jian-de-xuan-ze</id>
    <content type="html"><![CDATA[<p>近期一直忙于写android应用的代码,其实我没有看完过任何一本android的著作,虽然说书籍收集了也
不少了,但很少完整的去看,有时候发现最靠谱的还是官方文档和一些实践性的书籍或者blog,通常工作
中是遇到问题,查资料,然后解决问题,在这个过程中慢慢发现其实写android的代码很有挑战性,要关注
的东西很多,比如:</p>

<ol>
<li><p>程序本身的高效,高效意味着更短的延迟,用户更好的体验.</p></li>
<li><p>网络的开销,比如官方<a href="http://developer.android.com/training/efficient-downloads/efficient-network-access.html#RadioStateMachine">这篇</a>关于网络对于电量的影响</p></li>
<li><p>异步处理,费时操作都得异步,否则UI就block了,再过几秒系统就提示无反应了,最坏的结果就是被直接拖到垃圾桶.</p></li>
</ol>


<p>在这里我就不说后两点的,主讲第一点,也就是程序效率的本身,高效和OO之间似乎有些矛盾,当然这种问题
在java领域已经越来越不明显,因为java server级的JIT(Just In Time Compiler)已经为我们做了
足够多的工作,而我们都是坐享其成,如果没有inline优化,你们敢想一个方法不超过5行吗?for循环我们
很少去手动提取不变量了,因为JIT总是能帮我们找到hot的loop并优化掉,而一些非热点且低效代码,则被
超强的机器性能所掩盖.而对于dalvik,情况发生了变化,一切似乎回到那个资源无比紧缺的时代,系统的设
计需要考虑移动设备的特点和dalvik本身.</p>

<p>在这个<strong>时代</strong>写代码除了算法加数据结构,我们还有很多问题要关注,因为这个时代的主流不再是孤胆英雄式的
程序员,更多的需要依赖团队开发,对于公司来说,代码的可维护性并不比高效的分量轻多少,而在android上
很多优化都是具有版本和硬件的亲和性,不同的版本,不同的硬件也许有完全不一样的结果,所以一个优化值不
值得做是个需要好好思考的问题,而我个人对于这个问题的建议是:</p>

<ol>
<li><p>优化方案本身的生命力
比如getter,setter的性能问题,早期dalvik的getter,setter确实比直接读写成员性能要差很多
但这个优化有些逆天了,而且长远来看这种问题被内置优化的可能性较大,故在可忍受的范围内可以优化
但不能作为普遍使用的技巧,否则就颠覆了OO的封装,随意修改私有对象状态倒是无所谓,如果是共享的
那就....</p></li>
<li><p>优化是否有必要
很多时候我们未必需要按官方的建议优化,比如绝大多数的app都不会占据太多的CPU,当然如果是一些
游戏的话...所以我们大可不必过于的关心一些优化代码的技巧,let it go~,写出你认为更美观的代
码才是绝大多数情况下我们要考虑的问题.</p></li>
<li><p>如果必须要优化,泡好一杯茶,打起精神,尽量将优化对于系统整体的影响降到最低程度.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
